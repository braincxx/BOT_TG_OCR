import telebot
import os
from telebot import apihelper
import re
import sqlite3

#regular for time total
reg = re.compile('(:?\d\d:|\d:){0,1}(:?\d\d|\d){0,1}(:?:\d\d.\d|:\d.\d){1}')
#regular for time relax
reg_relax = re.compile('(:?\d:\d\d|\d\d:\d\d)')
#regular for word
reg_word = re.compile('[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]+')

#config
database_dir = r'/root/RABOTA/BOT_TG_OCR/bot_tg.db'
directory_save = r'/root/RABOTA/BOT_TG/NEW_COLLECTION/'
'''
directory_save = r'/root/RABOTA/BOT_TG/NEW_COLLECTION/'
csv_data_dump = r'/root/RABOTA/BOT_TG/data_name.csv'
csv_data_training = r'/root/RABOTA/BOT_TG/data_training.csv'
'''
'''
directory_save = r'/root/BOT/PHOTO/'
csv_data_dump = r'/root/BOT/data_name.csv'
csv_data_training = r'/root//BOT/data_training.csv'
'''


#init data_base 
conn = sqlite3.connect(database_dir, check_same_thread=False)
cur = conn.cursor()

if not os.path.exists(database_dir):
    print("DATABASE IS NOT EXISTS")
    exit(0) 

#global variable for writing in csv file


last_id_dic = {}

#1128659144:AAFmr_DS-p-_iPRUk1Xc7U-Mv7edaWfz07M - Concept_2

apihelper.proxy = {'https': 'socks5://96.96.33.133:1080'}
bot = telebot.TeleBot('1128659144:AAFmr_DS-p-_iPRUk1Xc7U-Mv7edaWfz07M')
#@Concept_2_bot
keyboard1 = telebot.types.ReplyKeyboardMarkup()
keyboard1.row('just row'), 
keyboard1.row('single distance', 'single time')
keyboard1.row('intervals distance', 'intervals time')

keyboard_start = telebot.types.ReplyKeyboardMarkup()
keyboard_start.row('–î–∞', '–ù–µ—Ç')

keyboard_remove = telebot.types.ReplyKeyboardRemove()


priv_message = '''–ü—Ä–∏–≤–µ—Ç, {}!!!

–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —É–ª—É—á—à–∞—Ç—å –∏—Ö. –ù–æ –ø–æ–∫–∞ —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å, –∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –º–Ω–µ. 

–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —è –∑–∞–¥–∞–º —Ç–µ–±–µ –ø–∞—Ä—É —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ —Ç–æ–º —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ —Ç—ã –ø—Ä–æ—à—ë–ª –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ –∑–∞–Ω—è–ª–æ. –ò —É–∂–µ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–∞–º —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ —Ç–µ–±—è, —è –±—ã—Å—Ç—Ä–æ —É—á—É—Å—åüòâ

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±—É–¥—å —Ç–æ –ø—Ä–æ—Å—Ç–æ–π ‚ÄúJust Row‚Äù  –∏–ª–∏ ‚ÄúSelect Workout‚Äù, –Ω–∞–∂–º–∏ ‚ÄúMenu -> Memory -> List by Date‚Äù –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. 

–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–±—É–¥–µ—à—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ /help –∏–ª–∏ /start'''

help_message_print = '''–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —è –∑–∞–¥–∞–º —Ç–µ–±–µ –ø–∞—Ä—É —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ —Ç–æ–º —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ —Ç—ã –ø—Ä–æ—à—ë–ª –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ –∑–∞–Ω—è–ª–æ. –ò —É–∂–µ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–∞–º —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ —Ç–µ–±—è, —è –±—ã—Å—Ç—Ä–æ —É—á—É—Å—åüòâ

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±—É–¥—å —Ç–æ –ø—Ä–æ—Å—Ç–æ–π ‚ÄúJust Row‚Äù  –∏–ª–∏ ‚ÄúSelect Workout‚Äù, –Ω–∞–∂–º–∏ ‚ÄúMenu -> Memory -> List by Date‚Äù –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
'''

types_training = ['just row', 'single distance', 'single time']

def time_to_second(st):
    sec = 0 
    if '.' in st:
        full, ml = st.split('.')
    else:
        full = st
    full = [int(i) for i in full.split(":") if i is not '']
    full.reverse()
    for i in range(len(full)):
        sec += full[i] * 60 ** i
    return sec

@bot.message_handler(commands=['start'])
def start_message(message):
    data_name = cur.execute("select * from personal_data").fetchall()
    for st in data_name:
        if st[4] == message.from_user.id:
            bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return
    bot.send_message(message.chat.id, priv_message.format(message.from_user.username))
    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –í—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞?', reply_markup=keyboard_start)
#    bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')#, reply_markup=keyboard1)
#   print(message)


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, help_message_print)


@bot.message_handler(content_types=['text'])
def registration(message):
    if message.text == '–î–∞':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –≥–æ—Ä–æ–¥(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ú–æ—Å–∫–≤–∞)", reply_markup=keyboard_remove)
    elif message.text == '–ù–µ—Ç':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –í–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', reply_markup=keyboard_remove)
    elif message.text.split().__len__() == 3:
        if reg_relax.fullmatch(message.text.split()[1]) and reg_relax.fullmatch(message.text.split()[0]):
            a, b, c = message.text.split()
            try:
                c = int(c)
                sec_1 = time_to_second(a)
                sec_2 = time_to_second(b)
                totally = sec_1 * c + sec_2 * (c - 1)
                query_time = "select total_time from base_training where id_record=%d" % (last_id_dic[str(message.chat.id)])
                time_full = cur.execute(query_time).fetchall()[0][0]
                time_full = time_to_second(time_full)
                if time_full != totally:
                    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                    return 
                query = "insert into intervals_time(id_ref, time_work, time_relax, count_sets) values (%d, '%s', '%s', %d)" %(last_id_dic[str(message.chat.id)], a, b, c)
            except:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            cur.execute(query)
            conn.commit()
            last_id_dic.pop(str(message.chat.id))
            bot.send_message(message.chat.id, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, —Å–ø–∞—Å–∏–±–æ. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.')
            return
        elif reg_relax.fullmatch(message.text.split()[1]):
            a, b, c = message.text.split()
            try:
                a = int(a)
                c = int(c)
                total_meters = a * c
                query_2 = "select total_distance from base_training where id_record=%d" % (last_id_dic[str(message.chat.id)])
                total_base = int(cur.execute(query_2).fetchall()[0][0])
                if total_meters != total_base:
                    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                    return 
                query = "insert into intervals_distance(id_ref, meters, time_relax, count_sets) values (%d, '%d', '%s', %d)" %(last_id_dic[str(message.chat.id)], a, b, c)
            except:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            cur.execute(query)
            conn.commit()
            last_id_dic.pop(str(message.chat.id))
            bot.send_message(message.chat.id, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, —Å–ø–∞—Å–∏–±–æ. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.')
            return

        
        try:
            a, b, c = [str(i) for i in message.text.split()]
        except:
            bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        if reg_word.search(a) is not None or reg_word.search(b) is not None or reg_word.search(c) is not None:
            bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            return
        quer = "insert into personal_data(Last_name, First_name, Town, Id_user) values('%s', '%s', '%s', %d)" %  (a, b, c, message.from_user.id)
        try:
            cur.execute(quer)
            conn.commit()
        except:
            bot.send_message(message.chat.id, 'bad open data_base')
            exit(0)
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.')
   
    elif message.text == 'intervals distance':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ (total distance) –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è (total time) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.(–Ω–∞–ø—Ä–∏–º–µ—Ä 2000 10:10:10.3)', reply_markup=keyboard_remove)
        query = "update base_training set type_workout='%s' where id_record=%d" % (message.text, last_id_dic[str(message.chat.id)])
        cur.execute(query)
    elif message.text == 'intervals time':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ (total distance) –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è (total time) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.(–Ω–∞–ø—Ä–∏–º–µ—Ä 2000 10:10:10.3)', reply_markup=keyboard_remove)
        query = "update base_training set type_workout='%s' where id_record=%d" % (message.text, last_id_dic[str(message.chat.id)])
        cur.execute(query)
    elif message.text in types_training:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ (total distance) –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è (total time) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.(–Ω–∞–ø—Ä–∏–º–µ—Ä 2000 10:10:10.3)', reply_markup=keyboard_remove)
        query = "update base_training set type_workout='%s' where id_record=%d" % (message.text, last_id_dic[str(message.chat.id)])
        cur.execute(query)

    elif message.text.split().__len__() == 2:
        try:
            metrs, time = message.text.split()
            if not reg.fullmatch(time):
                bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM:SS.MS(–Ω–∞–ø—Ä–∏–º–µ—Ä 1:54.2), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
                return

            query = "update base_training set total_distance=%d where id_record=%d" % (int(metrs), last_id_dic[str(message.chat.id)])
            cur.execute(query)
            query = "update base_training set total_time='%s' where id_record=%d" % (time, last_id_dic[str(message.chat.id)])
            cur.execute(query)
            conn.commit()
            typ = cur.execute('select type_workout from base_training where id_record=%d' % (last_id_dic[str(message.chat.id)])).fetchall()[0][0]
            if typ == 'intervals time':
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, 3:00 1:00 4)')
                return
            elif typ == 'intervals distance':
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏, –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, 500 1:00 4)')
                return
            last_id_dic.pop(str(message.chat.id))
            bot.send_message(message.chat.id, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, —Å–ø–∞—Å–∏–±–æ. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.')
        except:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            return
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–æ.':
        for i in os.listdir(directory_save):
            bot.send_message(message.chat.id, i)
    
@bot.message_handler(content_types=['photo'])
def save_photo(message):

    global last_id_dic
    last_id_dic[str(message.from_user.id)] = ''
    
    dirr = directory_save + str(message.from_user.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", reply_markup=keyboard1)

    if not os.path.exists(dirr):
        os.mkdir(dirr)
    dirr += r'/'
    fileID = message.photo[-1].file_id
    file_info = bot.get_file(fileID)
    downloaded_file = bot.download_file(file_info.file_path)
    last_uuid = str(fileID)
    with open(dirr + str(fileID) + '.jpeg', 'ab') as new_file:
        new_file.write(downloaded_file)

    query = "insert into base_training(id_user, uuid_photo) values(%d, '%s')" % (message.from_user.id, str(fileID))
    cur.execute(query)
    query = "select id_record from base_training where id_user=%d and uuid_photo='%s'" % (message.from_user.id, str(fileID))
    cur.execute(query)
    data = cur.fetchall()[0][0]
    last_id_dic[str(message.from_user.id)] = int(data)

bot.polling(none_stop=True, timeout=123)