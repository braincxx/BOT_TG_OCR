import telebot
import os
from telebot import apihelper
import re

#regular for time
reg = re.compile('(:?\d\d:|\d:){0,1}(:?\d\d|\d){0,1}(:?:\d\d.\d|:\d.\d){1}')

#config
directory_save = r'/root/RABOTA/BOT_TG/NEW_COLLECTION/'
csv_data_dump = r'/root/RABOTA/BOT_TG/data_name.csv'
csv_data_training = r'/root/RABOTA/BOT_TG/data_training.csv'

'''
directory_save = r'/root/BOT/PHOTO/'
csv_data_dump = r'/root/BOT/data_name.csv'
csv_data_training = r'/root//BOT/data_training.csv'
'''

#global variable for writing in csv file
last_uuid = ''
last_id = ''
last_metrs = 0
last_time = ''
last_type = ''

#1128659144:AAFmr_DS-p-_iPRUk1Xc7U-Mv7edaWfz07M - Concept_2

apihelper.proxy = {'https': 'socks5://96.96.33.133:1080'}
bot = telebot.TeleBot('1128659144:AAFmr_DS-p-_iPRUk1Xc7U-Mv7edaWfz07M')

keyboard1 = telebot.types.ReplyKeyboardMarkup()
keyboard1.row('just row'), 
keyboard1.row('single distance', 'single time')
keyboard1.row('intervals distance', 'intervals time')

keyboard_start = telebot.types.ReplyKeyboardMarkup()
keyboard_start.row('–î–∞', '–ù–µ—Ç')

keyboard_remove = telebot.types.ReplyKeyboardRemove()


priv_message = '''–ü—Ä–∏–≤–µ—Ç, {}!!!

–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —É–ª—É—á—à–∞—Ç—å –∏—Ö. –ù–æ –ø–æ–∫–∞ —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å, –∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –º–Ω–µ. 

–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —è –∑–∞–¥–∞–º —Ç–µ–±–µ –ø–∞—Ä—É —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ —Ç–æ–º —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ —Ç—ã –ø—Ä–æ—à—ë–ª –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ –∑–∞–Ω—è–ª–æ. –ò —É–∂–µ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–∞–º —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ —Ç–µ–±—è, —è –±—ã—Å—Ç—Ä–æ —É—á—É—Å—åüòâ

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±—É–¥—å —Ç–æ –ø—Ä–æ—Å—Ç–æ–π ‚ÄúJust Row‚Äù  –∏–ª–∏ ‚ÄúSelect Workout‚Äù, –Ω–∞–∂–º–∏ ‚ÄúMenu -> Memory -> List by Date‚Äù –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. 

–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–±—É–¥–µ—à—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ /help –∏–ª–∏ /start'''

help_message_print = '''–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —è –∑–∞–¥–∞–º —Ç–µ–±–µ –ø–∞—Ä—É —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ —Ç–æ–º —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ —Ç—ã –ø—Ä–æ—à—ë–ª –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ –∑–∞–Ω—è–ª–æ. –ò —É–∂–µ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–∞–º —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ —Ç–µ–±—è, —è –±—ã—Å—Ç—Ä–æ —É—á—É—Å—åüòâ

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±—É–¥—å —Ç–æ –ø—Ä–æ—Å—Ç–æ–π ‚ÄúJust Row‚Äù  –∏–ª–∏ ‚ÄúSelect Workout‚Äù, –Ω–∞–∂–º–∏ ‚ÄúMenu -> Memory -> List by Date‚Äù –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
'''

types_training = ['single distance', 'single time', 'intervals distance', 'intervals time']

@bot.message_handler(commands=['start'])
def start_message(message):
    if not os.path.exists(csv_data_dump):
        open(csv_data_dump,'a').close()
    if not os.path.exists(csv_data_training):
        open(csv_data_training,'a').close()
    f = open(csv_data_dump, 'r')
    for st in f.readlines():
        idd = st.split(';')[3].strip()
        if idd == str(message.from_user.id):
            bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return
    f.close()
    bot.send_message(message.chat.id, priv_message.format(message.from_user.username))
    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –í—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞?', reply_markup=keyboard_start)
#    bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')#, reply_markup=keyboard1)
#   print(message)

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, help_message_print)

@bot.message_handler(content_types=['text'])
def registration(message):
    if message.text == '–î–∞':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –≥–æ—Ä–æ–¥(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ)", reply_markup=keyboard_remove)
    elif message.text == '–ù–µ—Ç':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –í–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', reply_markup=keyboard_remove)
    elif message.text.split().__len__() == 3:
        try:
            with open(csv_data_dump, 'a') as cs:
                ms = message.text.split()
                ms.append(str(message.from_user.id))
                cs.write(';'.join(ms) + '\n')
        except:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ!')
            return
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.')
    elif message.text in types_training:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ (total distance) –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è (total time) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.', reply_markup=keyboard_remove)
        global last_type
        last_type = message.text
    elif message.text.split().__len__() == 2:
        try:
            metrs, time = message.text.split()
            global last_metrs
            global last_time
            global last_id
            global last_uuid
            int(metrs)
            last_time = time
            last_metrs = metrs
            with open(csv_data_training, 'a') as f:
                a = []
                a.append(last_id)
                a.append(last_uuid)
                a.append(last_type)
                a.append(str(last_metrs))
                a.append(last_time)
                s = ';'.join(a) + '\n'
                f.write(s)
            last_uuid = ''
            last_id = ''
            last_metrs = 0
            last_time = ''
            last_type = ''
            bot.send_message(message.chat.id, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, —Å–ø–∞—Å–∏–±–æ. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.')
        except:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            return
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–æ.':
        for i in os.listdir(directory_save):
            bot.send_message(message.chat.id, i)
    
@bot.message_handler(content_types=['photo'])
def save_photo(message):

    global last_id
    last_id = str(message.from_user.id)
    global last_uuid
    
    dirr = directory_save + str(message.from_user.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", reply_markup=keyboard1)

    if not os.path.exists(dirr):
        os.mkdir(dirr)
    dirr += r'/'
    fileID = message.photo[-1].file_id
    file_info = bot.get_file(fileID)
    downloaded_file = bot.download_file(file_info.file_path)
    last_uuid = str(fileID)
    with open(dirr + str(fileID) + '.jpeg', 'ab') as new_file:
        new_file.write(downloaded_file)

bot.polling(none_stop=True, timeout=123)